.. _origin:

원본서버
******************

STON과 원본서버의 관계를 설정한다.
원본서버는 HTTP규격을 준수하는 고객의 서버를 의미한다.

.. toctree::
   :maxdepth: 2

원본보호
====================================

STON의 목표 중 하나는 원본서버를 보호하는 것이다.


장애감지와 자동복구
---------------------

원본서버에 장애가 발생하면 자동배제한다.
다시 안정화되면 서비스에 투입한다. ::

    <OriginOptions>
        <ConnectTimeout>3</ConnectTimeout>
        <ReceiveTimeout>10</ReceiveTimeout>
        <Exclusion>3</Exclusion>
        <Recovery Cycle="10">5</Recovery>
    </OriginOptions>

-  ``<ConnectTimeout> (기본: 3초)``

    n초 이내에 원본서버와 접속이 이루어지지 않는 경우 접속실패로 간주한다.
   
-  ``<ReceiveTimeout> (기본: 10초)``

    정상적인 HTTP요청에도 불구하고 원본서버가 HTTP응답/컨텐츠를 n초 동안 
    보내지 않는 경우 전송실패로 간주한다.   

-  ``<Exclusion> (기본: 3회)``

    원본서버에서 연속적으로 n번 장애상황(연결실패 또는 전송실패)이 발생하면 
    해당 서버를 유효 원본서버 목록에서 배제한다. 
    배제 전 정상적인 연결이 이루어진다면 이 값은 다시 0으로 초기화된다.

-  ``<Recovery> (기본: 5회, Cycle: 10초)``

    배제된 원본서버를 다시 서비스에 투입하기 위하여 설정된 ``Cycle`` 마다 "/"를 요청한다. 
    원본서버로 연결이 되고 (응답코드 여부와 상관없이)응답이 n회 되면 
    서비스에 재투입한다. 


DNS 백업
---------------------

원본서버 주소가 Domain으로 설정되어 있다면 항상 최신의 Resolving결과가 사용된다.
하지만 DNS서버의 장애 또는 네트워크 구간 장애로 인하여 Resolving이 실패할 경우 
마지막으로 Resolving된 IP에 부하가 집중될 수 있다. ::

    <OriginOptions>
        <DNSBackup>5min</DNSBackup>
    </OriginOptions>
    
-  ``<DNSBackup> (기본: 5min)``
   Resolving장애 상황이 발생하면 최근(일정시간 동안) 사용된 Unique한 IP들을 
   모두 사용하여 부하를 분산한다.


과부하 판단
---------------------

처음 요청되는 콘텐츠는 항상 원본서버에서 요청해야 한다.
하지만 원본서버가 과부하 상태라면 콘텐츠 갱신을 늦추어 원본부하를 높이지 않는다. ::

    <OriginOptions>
        <BusySessionCount>100</BusySessionCount>
    </OriginOptions>

-  ``<BusySessionCount> (기본: 100개)``
   원본서버와 HTTP트랜잭션을 진행 중인 세션 수가 설정 수를 넘으면 과부하 상태로 판단한다.
   과부하 상태에서 만료된 컨텐츠를 갱신하기 위해 원본서버로 접속하지 않도록 TTL을 
   일정시간(OriginBusy)만큼 연장한다.
   무조건 원본서버로 가게 하려면 이 값을 아주 크게 설정하면 된다.
   


원본 선택
---------------------

원본서버 주소가 멀티(2개 이상)로 구성되어 있을 때 어떤 원본서버로 요청을 보낼지 설정한다. ::

    <OriginOptions>
        <BalanceMode>RoundRobin</BalanceMode>
    </OriginOptions>

-  ``<BalanceMode> (기본: RoundRobin)``

   -  ``RoundRobin (기본)`` 모든 원본서버가 균등하게 요청을 받도록 Round-Robin으로 동작한다. 
      연결된 Idle세션은 해당 서버로 요청이 필요할 때만 사용한다.
   
   -  ``Session`` 연결된 Idle세션이 있다면 우선 사용한다. 
      신규 세션이 필요하면 Round-Robin으로 할당한다.
      
=========== =================================================================== =====================================================
            RoundRobin                                                          Session
=========== =================================================================== =====================================================
부하(요청)	모든 서버가 부하를 균등하게 분배	                                반응성과 재사용성이 좋은 서버로 로드가 가중됨
연결비용	높음 (해당 서버의 순서가 되면 연결된 세션을 찾고 없으면 연결시도)   낮음 (재사용할 수 있는 세션이 없을 때만 연결)
재사용성	낮음 (서버 분배 우선)	                                            높음 (항상 연결된 세션을 우선 사용)
세션수	    많음 (각 서버마다 동시에 진행되는 HTTP 트랜잭션의 합)               적음 (동시에 진행되는 HTTP 트랜잭션 만큼 세션 존재)
=========== =================================================================== =====================================================